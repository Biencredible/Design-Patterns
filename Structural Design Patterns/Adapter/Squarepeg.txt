// The Adapter pretends to be a roundt peg, with a radius equal to a half of the square's diameter (in other words, the 
// radius of the smallest circle that can accomodate the square peg)

// Say you have two classes with compatible interfaces:
// RoundHole and RoundPeg.
class RoundHole is
    constructor RoundHole(radius) {...}

    method getRadius() is
        // Return the radius of the hole.

    method fits(peg: RoundPeg) is
        return this.getRadius() >= peg.getRadius()

class RoundPeg is
    constructor RoundPeg(radius) {...}
    method getRadius() is
        // Return the radius of the peg.

// But ther's an incompatible class: SquarePeg.
class SquarePeg is
    constructor SquarePeg(width) {...}

    method getWidth() is
        // Return the square peg width

// An adapter class lets you fit square pegs into round holes.
// It extends the RoundPeg class to let the adapter objects act 
// as round pegs.
class SquarePegAdapter extends RoundPeg is
    // In reality, the adapter contains an instance of the 
    // SquarePeg class.
    private field peg: SquarePeg

    constructor SquarePegAdapter(peg: SquarePeg) is
        this.peg = peg
    method getRadius() is
        // The adapter pretends that it's a round peg with a
        // raius that could fit the squrae peg that the adapter 
        // actually wraps.
        return ppeg.getWodth() * Math.sqrt(2) / 2

// Somewhere in client code.
hole = new RoundHole(5)
rpeg = new RoundPeg(5)
hole.fits(rpeg) // true

small_sqpeg = new SquarePeg(5)
large_sqpeg = new SquarePeg(10)
hole.fits(small_sqpeg) // this won't compile (incompatible type)

small_sqpeg_adapter = new SquarePegAdapter(small_sqpeg)
large_sqpeg_adapter = new SquarePegAdapter(large_sqpeg)
hole.fits(small_sqpeg_adapter) // true
hole.fits(large_sqpeg_adapter) // false