In this example, the Facade pattern simplifies interaction with a complex video conversion framework.
Instead of making your code work with dozens of the framework classes directly, you create a facade class which 
encapsulates that functionality and hides it from the rest of the code. This structure also helps you to minimize the 
effort  of upgrading to future versions of the framework or replacinng it with another one. The only thing you'd need to 
change in your app would be the implementation of the facade's methods.

// These are some classes of a complex 3rd-party video conversion framework. We don't control that code, therefore
// can't simplify it.

class VideoFile
// ...

class OggCompressionCodec
// ...

class MPEG4CompressionCodec
// ...

Class CodecFactory
// ...

Class BitrateReader
// ...

Class AudioMixer
// ...

// We create a facade class to hide the framework's complexity behind a simple interface. It's a trade-off between
// functionality and simplicity.

class VideoConverter is
    method convert(filename, format):File is
        file = new VideoFile(filename)
        sourceCodec = (new CodecFactory).extract(file)
        if(format == "mp4")
            destinationCodec = new MPEG4CompressionCOdec()
        else
            destinationCodec = new OggCompressionCOdec()
        buffer = BitrateReader.. convert(buffer, destinationCodec)
        result = (new AudioMixer()).fix(result)
        return new File(result)

// Applocation classes don't depend on a billion classes provided by the complex framework. ALso, if you decide to
// switch frameworks, you only need to rewrite the facade class.
class Application is
    method main() is
        convertor = new VideoConverter()
        mp4 = convertor.convert("funnny-cats-video.ogg", "mp4")
        mp4.save()